#include <stdio.h>
#define N 16
#define BLOCK_SIZE 16

__global__ void gpu_square_matrix_mult(int *d_a, int *d_b, int *d_result, int n) {
    __shared__ int tile_a[BLOCK_SIZE][BLOCK_SIZE];
    __shared__ int tile_b[BLOCK_SIZE][BLOCK_SIZE];

    int row = blockIdx.y * BLOCK_SIZE + threadIdx.y;
    int col = blockIdx.x * BLOCK_SIZE + threadIdx.x;

    int tmp = 0;
    int idx;

    for (int sub=0; sub<gridDim.x; ++sub)
    {
        idx = row * n + sub * BLOCK_SIZE + threadIdx.x;
        if(idx >= n*n)
            tile_a[threadIdx.y][threadIdx.x] = 0;
        else
            tile_a[threadIdx.y][threadIdx.x] = d_a[idx];

        idx = (sub * BLOCK_SIZE + threadIdx.y) * n + col;
        if(idx >= n*n)
            tile_b[threadIdx.y][threadIdx.x] = 0;
        else
            tile_b[threadIdx.y][threadIdx.x] = d_b[idx];
        
        __syncthreads();

        for (int k = 0; k < BLOCK_SIZE; ++k)
            tmp += tile_a[threadIdx.y][k] * tile_b[k][threadIdx.x];

        __syncthreads();
    }
    if(row < n && col < n)
    {
        d_result[row * n + col] = tmp;
    }
}

int main() {
    int a[N*N];
    int b[N*N];
    int c[N*N];
    int *d_a, *d_b, *d_c;
    int size = N*N*sizeof(int);

    // initialize a and b with real values (omitted)
    // ...

    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);

    dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE);
    dim3 dimGrid(N/dimBlock.x, N/dimBlock.y);
    gpu_square_matrix_mult<<<dimGrid, dimBlock>>>(d_a, d_b, d_c, N);

    cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    return 0;
}
